---
description: USE WHEN intergrating APIs
globs: ["**/*"]
alwaysApply: false
---

# React API Integration and Service Layer Rules

## React Query/TanStack Query Integration

### Service Layer Architecture
- Create abstraction layer for all API interactions
- Handle errors at service boundaries, not in components
- Transform API responses to match application models
- Implement consistent request/response patterns

```tsx
interface ApiResponse<T> {
  data: T;
  status: number;
  message?: string;
}

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  avatar?: string;
}

interface CreateUserRequest {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
}

class UserService {
  private baseURL = '/api/users';

  async getUsers(): Promise<User[]> {
    const response = await fetch(this.baseURL);
    if (!response.ok) {
      throw new Error(`Failed to fetch users: ${response.statusText}`);
    }
    const apiResponse: ApiResponse<User[]> = await response.json();
    return apiResponse.data;
  }

  async getUsersPaginated(page: number = 0, limit: number = 20): Promise<User[]> {
    const params = new URLSearchParams({
      page: page.toString(),
      limit: limit.toString()
    });
    
    const response = await fetch(`${this.baseURL}?${params}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch paginated users: ${response.statusText}`);
    }
    const apiResponse: ApiResponse<User[]> = await response.json();
    return apiResponse.data;
  }

  async getUser(id: string): Promise<User> {
    const response = await fetch(`${this.baseURL}/${id}`);
    if (!response.ok) {
      throw new Error(`Failed to fetch user: ${response.statusText}`);
    }
    const apiResponse: ApiResponse<User> = await response.json();
    return apiResponse.data;
  }

  async createUser(userData: CreateUserRequest): Promise<User> {
    const response = await fetch(this.baseURL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData)
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to create user');
    }
    
    const apiResponse: ApiResponse<User> = await response.json();
    return apiResponse.data;
  }

  async updateUser(id: string, userData: Partial<User>): Promise<User> {
    const response = await fetch(`${this.baseURL}/${id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData)
    });
    
    if (!response.ok) {
      throw new Error(`Failed to update user: ${response.statusText}`);
    }
    
    const apiResponse: ApiResponse<User> = await response.json();
    return apiResponse.data;
  }
}

export const userService = new UserService();
```

### React Query Hooks
- Use React Query for server state management
- Implement proper loading, error, and success states
- Use optimistic updates for better UX

```tsx
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

// Query hooks for data fetching
export const useUsers = () => {
  return useQuery({
    queryKey: ['users'],
    queryFn: () => userService.getUsers(),
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 3,
    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000)
  });
};

export const useUser = (userId: string) => {
  return useQuery({
    queryKey: ['users', userId],
    queryFn: () => userService.getUser(userId),
    enabled: !!userId,
    staleTime: 5 * 60 * 1000
  });
};

// Mutation hooks for data modifications
export const useCreateUser = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (userData: CreateUserRequest) => userService.createUser(userData),
    onSuccess: (newUser) => {
      // Update the users list cache
      queryClient.setQueryData(['users'], (oldUsers: User[] | undefined) => {
        return oldUsers ? [...oldUsers, newUser] : [newUser];
      });
      
      // Invalidate and refetch
      queryClient.invalidateQueries(['users']);
    },
    onError: (error: Error) => {
      console.error('Failed to create user:', error.message);
    }
  });
};

export const useUpdateUser = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, userData }: { id: string; userData: Partial<User> }) =>
      userService.updateUser(id, userData),
    onMutate: async ({ id, userData }) => {
      // Cancel outgoing refetches
      await queryClient.cancelQueries(['users', id]);

      // Snapshot the previous value
      const previousUser = queryClient.getQueryData(['users', id]);

      // Optimistically update to the new value
      queryClient.setQueryData(['users', id], (old: User | undefined) => {
        return old ? { ...old, ...userData } : undefined;
      });

      return { previousUser };
    },
    onError: (error, { id }, context) => {
      // Rollback to the previous value
      if (context?.previousUser) {
        queryClient.setQueryData(['users', id], context.previousUser);
      }
    },
    onSettled: (data, error, { id }) => {
      // Always refetch after error or success
      queryClient.invalidateQueries(['users', id]);
      queryClient.invalidateQueries(['users']);
    }
  });
};
```

### Component Integration with Hooks
- Use React Query hooks in components for clean data fetching
- Handle loading states and errors appropriately

```tsx
const UserList: React.FC = () => {
  const { 
    data: users = [], 
    isLoading, 
    isError, 
    error, 
    refetch 
  } = useUsers();
  
  const deleteUserMutation = useDeleteUser();
  const updateUserMutation = useUpdateUser();

  const handleDeleteUser = async (userId: string) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        await deleteUserMutation.mutateAsync(userId);
      } catch (error) {
        alert('Failed to delete user. Please try again.');
      }
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
        <span className="ml-2">Loading users...</span>
      </div>
    );
  }

  if (isError) {
    return (
      <div className="p-8 text-center">
        <div className="text-red-600 mb-4">
          Error loading users: {error?.message}
        </div>
        <button
          onClick={() => refetch()}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {users.map(user => (
        <div key={user.id} className="flex items-center justify-between p-4 border rounded">
          <div className="flex items-center space-x-3">
            <div>
              <h3 className="font-semibold">{user.firstName} {user.lastName}</h3>
              <p className="text-gray-600">{user.email}</p>
            </div>
          </div>
          
          <button
            onClick={() => handleDeleteUser(user.id)}
            disabled={deleteUserMutation.isLoading}
            className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600 disabled:opacity-50"
          >
            {deleteUserMutation.isLoading ? 'Deleting...' : 'Delete'}
          </button>
        </div>
      ))}
    </div>
  );
};
```

## Error Handling Strategies

### Comprehensive Error Handling
- Catch and handle errors at appropriate levels
- Provide meaningful error messages to users
- Implement retry mechanisms for transient failures

```tsx
// Error boundary for React Query errors
export const ApiErrorBoundary: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <ErrorBoundary
      fallback={({ error, resetError }) => (
        <div className="p-8 text-center">
          <h2 className="text-xl font-semibold text-red-600 mb-4">
            Something went wrong
          </h2>
          <p className="text-gray-600 mb-4">{error.message}</p>
          <button
            onClick={resetError}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Try again
          </button>
        </div>
      )}
      onError={(error) => {
        console.error('API Error:', error);
      }}
    >
      {children}
    </ErrorBoundary>
  );
};

// Custom hook for handling API errors
export const useApiError = () => {
  const [error, setError] = useState<string | null>(null);

  const handleError = useCallback((error: unknown) => {
    if (error instanceof Error) {
      setError(error.message);
    } else {
      setError('An unexpected error occurred');
    }
  }, []);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  return { error, handleError, clearError };
};

// Network error handling with retry
export const useNetworkAwareQuery = <T>(
  queryKey: string[],
  queryFn: () => Promise<T>,
  options: { retries?: number; retryDelay?: number } = {}
) => {
  const [isOnline, setIsOnline] = useState(navigator.onLine);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  return useQuery({
    queryKey,
    queryFn,
    enabled: isOnline,
    retry: (failureCount, error) => {
      if (!isOnline) return false;
      if (error instanceof Error && error.message.includes('Network')) {
        return failureCount < (options.retries || 3);
      }
      return false;
    },
    retryDelay: options.retryDelay || 1000
  });
};
```

## Custom Hooks for API Integration

### WebSocket and Real-time Data
- Handle WebSocket connections and subscriptions
- Unsubscribe from data sources on component cleanup

```tsx
// WebSocket hook for real-time data
export const useWebSocket = <T>(url: string) => {
  const [data, setData] = useState<T | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'open' | 'closed'>('connecting');
  const [error, setError] = useState<string | null>(null);
  const wsRef = useRef<WebSocket | null>(null);

  useEffect(() => {
    const ws = new WebSocket(url);
    wsRef.current = ws;
    
    ws.onopen = () => {
      setConnectionStatus('open');
      setError(null);
    };

    ws.onmessage = (event) => {
      try {
        const parsedData = JSON.parse(event.data);
        setData(parsedData);
      } catch (err) {
        setError('Failed to parse WebSocket message');
      }
    };

    ws.onerror = () => {
      setError('WebSocket connection error');
    };

    ws.onclose = () => {
      setConnectionStatus('closed');
    };

    return () => {
      ws.close();
      wsRef.current = null;
    };
  }, [url]);

  const sendMessage = useCallback((message: any) => {
    if (connectionStatus === 'open' && wsRef.current) {
      wsRef.current.send(JSON.stringify(message));
    }
  }, [connectionStatus]);

  return { data, connectionStatus, error, sendMessage };
};

// File upload hook
export const useFileUpload = () => {
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const uploadFile = useCallback(async (file: File, endpoint: string) => {
    setIsUploading(true);
    setError(null);
    setUploadProgress(0);

    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`Upload failed: ${response.statusText}`);
      }

      const result = await response.json();
      setUploadProgress(100);
      return result;
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Upload failed');
      throw err;
    } finally {
      setIsUploading(false);
    }
  }, []);

  return {
    uploadFile,
    uploadProgress,
    isUploading,
    error
  };
};
```

## Request Optimization

### Request Deduplication and Batching
- Implement request deduplication for concurrent requests
- Batch multiple API calls when possible

```tsx
// Request deduplication utility
class RequestDeduplicator {
  private pendingRequests = new Map<string, Promise<any>>();

  async dedupe<T>(key: string, requestFn: () => Promise<T>): Promise<T> {
    if (this.pendingRequests.has(key)) {
      return this.pendingRequests.get(key)!;
    }

    const request = requestFn().finally(() => {
      this.pendingRequests.delete(key);
    });

    this.pendingRequests.set(key, request);
    return request;
  }
}

const requestDeduplicator = new RequestDeduplicator();

// Batched requests hook
export const useBatchedUsers = (userIds: string[]) => {
  return useQuery({
    queryKey: ['users', 'batch', userIds.sort()],
    queryFn: async () => {
      const response = await fetch('/api/users/batch', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ids: userIds })
      });
      return response.json();
    },
    enabled: userIds.length > 0,
    staleTime: 5 * 60 * 1000
  });
};

// Infinite query for pagination
export const useInfiniteUsers = (pageSize: number = 20) => {
  return useInfiniteQuery({
    queryKey: ['users', 'infinite'],
    queryFn: ({ pageParam = 0 }) =>
      userService.getUsersPaginated(pageParam, pageSize),
    getNextPageParam: (lastPage, allPages) => {
      return lastPage.length === pageSize ? allPages.length : undefined;
    },
    staleTime: 5 * 60 * 1000
  });
};
